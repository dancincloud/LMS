/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ui;

/**
 * @author Joseph Yuanhao Li
 * @date 4/27/21 23:18
 */

import DBUtil.*;
import model.*;

import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import java.awt.*;
import java.awt.event.ActionListener;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.Collections;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.stream.Collectors;

/**
 * @author Ke
 */
public class InstructorCourse extends javax.swing.JPanel {

    enum TableType {
        student, file, zoom, assignment
    }

    enum TableMode {
        normal, edit
    }

    private Course course;

    private TableType type;

    private TableMode mode;

    /**
     * Creates new form CourseJPanel
     */
    public InstructorCourse(Course course) {
        initComponents();

        table.setRowHeight(40);
        table.setRowSelectionAllowed(true);
        table.setAutoCreateRowSorter(true);

        table.addMouseListener(new MouseListener() {
            @Override
            public void mouseClicked(MouseEvent e) {
                // click twice
                if (e.getClickCount() == 2) {
                    int row = table.getSelectedRow();

                    switch (type) {
                        case student:
                            mode = TableMode.edit;
                            table.setEnabled(true);

                            Student student = course.getStudentDirectory().get(row);

                            addData = new Object[][]{{student.getName(), student.getEmail(), student.getGpa()}};
                            table.setModel(new javax.swing.table.DefaultTableModel(
                                    addData,
                                    new String[]{
                                            "name", "email", "GPA"
                                    }
                            ));
                            break;
                        case file:
                            break;
                        case zoom:
                            java.net.URI uri = java.net.URI.create(course.getZoomMeetingDirectory().get(row).getLink());
                            java.awt.Desktop dp = java.awt.Desktop.getDesktop();
                            if (dp.isSupported(java.awt.Desktop.Action.BROWSE)) {
                                try {
                                    dp.browse(uri);
                                } catch (IOException ex) {

                                }
                            }
                            break;
                        case assignment:
                            Router.getInstance(null).go(new UploadAssignment(course.getAssignmentDirectory().get(row)));
                            break;
                        default:
                            break;
                    }
                }
            }

            @Override
            public void mousePressed(MouseEvent e) {
            }

            @Override
            public void mouseReleased(MouseEvent e) {

            }

            @Override
            public void mouseEntered(MouseEvent e) {

            }

            @Override
            public void mouseExited(MouseEvent e) {

            }
        });

        this.course = course;

        this.nameLabel.setText(Global.getInstance().getUser().getName());
        this.courseLabel.setText(course.getCourseID() + " - " + course.getName());
        studentButtonActionPerformed(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jSplitPane1 = new javax.swing.JSplitPane();
        container = new javax.swing.JPanel();
        courseLabel = new javax.swing.JLabel();
        line = new javax.swing.JSeparator();
        jScrollPane1 = new javax.swing.JScrollPane();
        table = new javax.swing.JTable();
        AddButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();
        confirmButton = new javax.swing.JButton();
        deleteButton = new javax.swing.JButton();
        SideBar = new javax.swing.JPanel();
        nameLabel = new javax.swing.JLabel();
        backButton = new javax.swing.JButton();
        fileButton = new javax.swing.JButton();
        studentButton = new javax.swing.JButton();
        zoomButton = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        assignmentButton = new javax.swing.JButton();

        container.setBackground(new java.awt.Color(255, 255, 255));

        courseLabel.setFont(new java.awt.Font("Skia", 1, 24)); // NOI18N
        courseLabel.setText("Course Name");

        table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(table);

        AddButton.setText("Add");
        AddButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddButtonActionPerformed(evt);
            }
        });

        cancelButton.setLabel("Cancel");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        confirmButton.setBackground(new java.awt.Color(0, 72, 200));
        confirmButton.setForeground(new java.awt.Color(255, 255, 255));
        confirmButton.setText("Confirm");
        confirmButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                confirmButtonActionPerformed(evt);
            }
        });

        deleteButton.setBackground(new java.awt.Color(238, 0, 0));
        deleteButton.setForeground(new java.awt.Color(255, 255, 255));
        deleteButton.setLabel("Delete");
        deleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout containerLayout = new javax.swing.GroupLayout(container);
        container.setLayout(containerLayout);
        containerLayout.setHorizontalGroup(
            containerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(containerLayout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addGroup(containerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(containerLayout.createSequentialGroup()
                        .addComponent(courseLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(deleteButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(AddButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(confirmButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cancelButton))
                    .addComponent(line, javax.swing.GroupLayout.DEFAULT_SIZE, 724, Short.MAX_VALUE)
                    .addComponent(jScrollPane1))
                .addContainerGap(589, Short.MAX_VALUE))
        );
        containerLayout.setVerticalGroup(
            containerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(containerLayout.createSequentialGroup()
                .addGap(34, 34, 34)
                .addGroup(containerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(courseLabel)
                    .addComponent(AddButton)
                    .addComponent(cancelButton)
                    .addComponent(confirmButton)
                    .addComponent(deleteButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(line, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 595, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(9, Short.MAX_VALUE))
        );

        jSplitPane1.setRightComponent(container);

        SideBar.setBackground(new java.awt.Color(33, 135, 251));
        SideBar.setPreferredSize(new java.awt.Dimension(160, 666));

        nameLabel.setFont(new java.awt.Font("Skia", 1, 18)); // NOI18N
        nameLabel.setForeground(new java.awt.Color(255, 255, 255));
        nameLabel.setText("name");

        backButton.setText("<< Back");
        backButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backButtonActionPerformed(evt);
            }
        });

        fileButton.setBackground(new java.awt.Color(51, 153, 255));
        fileButton.setText("File");
        fileButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fileButtonActionPerformed(evt);
            }
        });

        studentButton.setBackground(new java.awt.Color(51, 153, 255));
        studentButton.setText("Students");
        studentButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                studentButtonActionPerformed(evt);
            }
        });

        zoomButton.setBackground(new java.awt.Color(51, 153, 255));
        zoomButton.setLabel("Zoom meeting");
        zoomButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                zoomButtonActionPerformed(evt);
            }
        });

        assignmentButton.setBackground(new java.awt.Color(51, 153, 255));
        assignmentButton.setText("Assignment");
        assignmentButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                assignmentButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout SideBarLayout = new javax.swing.GroupLayout(SideBar);
        SideBar.setLayout(SideBarLayout);
        SideBarLayout.setHorizontalGroup(
            SideBarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSeparator1)
            .addGroup(SideBarLayout.createSequentialGroup()
                .addGroup(SideBarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(SideBarLayout.createSequentialGroup()
                        .addGap(30, 30, 30)
                        .addComponent(backButton))
                    .addGroup(SideBarLayout.createSequentialGroup()
                        .addGap(25, 25, 25)
                        .addComponent(nameLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(SideBarLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(assignmentButton, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(SideBarLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(SideBarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(fileButton, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(zoomButton, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(studentButton, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        SideBarLayout.setVerticalGroup(
            SideBarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(SideBarLayout.createSequentialGroup()
                .addGap(50, 50, 50)
                .addComponent(nameLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(29, 29, 29)
                .addComponent(studentButton)
                .addGap(28, 28, 28)
                .addComponent(fileButton)
                .addGap(38, 38, 38)
                .addComponent(zoomButton)
                .addGap(32, 32, 32)
                .addComponent(assignmentButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 269, Short.MAX_VALUE)
                .addComponent(backButton)
                .addGap(47, 47, 47))
        );

        jSplitPane1.setLeftComponent(SideBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSplitPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 1504, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSplitPane1)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void zoomButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_zoomButtonActionPerformed
//        AddButton.setText("Add");
        AddButton.setEnabled(true);


        type = TableType.zoom;
        mode = TableMode.normal;
//        table.setEnabled(false);

        List<ZoomMeeting> list = this.course.getZoomMeetingDirectory().getList();
        Object[][] students = new Object[list.size()][4];

        for (int i = 0; i < list.size(); i++) {
            ZoomMeeting s = list.get(i);
            students[i][0] = s.getZoomMeetingID();
            students[i][1] = s.getName();
            students[i][2] = s.getLink();
            students[i][3] = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(s.getCreateTime());
        }

        table.setModel(new javax.swing.table.DefaultTableModel(
                students,
                new String[]{
                        "id", "name", "link", "date"
                }
        ));


//        java.net.URI uri = java.net.URI.create("https://applications.zoom.us/lti/rich");
//        java.awt.Desktop dp = java.awt.Desktop.getDesktop();
//        if(dp.isSupported(java.awt.Desktop.Action.BROWSE)){
//            try {
//                dp.browse(uri);
//            } catch (IOException ex) {
//                Logger.getLogger(InstructorCourse.class.getName()).log(Level.SEVERE, null, ex);
//            }
//        }
    }//GEN-LAST:event_zoomButtonActionPerformed

    private void studentButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_studentButtonActionPerformed
//        AddButton.setText("Upload");
        AddButton.setEnabled(false);

        type = TableType.student;
        mode = TableMode.normal;
//        table.setEnabled(false);

        List<Student> list = this.course.getStudentDirectory().getList();
        Object[][] students = new Object[list.size()][4];

        for (int i = 0; i < list.size(); i++) {
            Student s = list.get(i);
            students[i][0] = s.getId();
            students[i][1] = s.getName();
            students[i][2] = s.getEmail();
            students[i][3] = s.getGpa();
        }

        table.setModel(new javax.swing.table.DefaultTableModel(
                students,
                new String[]{
                        "id", "name", "email", "GPA"
                }
        ));
    }//GEN-LAST:event_studentButtonActionPerformed

    private void fileButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fileButtonActionPerformed
        AddButton.setEnabled(true);

//        AddButton.setText("Add");
        type = TableType.file;
        mode = TableMode.normal;
//        table.setEnabled(false);

        List<File> list = this.course.getFileDirectory().getList();
        Object[][] files = new Object[list.size()][3];

        for (int i = 0; i < list.size(); i++) {
            File s = list.get(i);
            files[i][0] = s.getFileID();
            files[i][1] = s.getName();
            files[i][2] = s.getLink();
        }

        table.setModel(new javax.swing.table.DefaultTableModel(
                files,
                new String[]{
                        "id", "name", "link"
                }
        ));

    }//GEN-LAST:event_fileButtonActionPerformed

    private void backButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backButtonActionPerformed
        Router.getInstance(null).back(0);
    }//GEN-LAST:event_backButtonActionPerformed

    private void assignmentButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_assignmentButtonActionPerformed
        // TODO add your handling code here:
        AddButton.setEnabled(true);

        type = TableType.assignment;
        mode = TableMode.normal;

        List<Assignment> list = this.course.getAssignmentDirectory().getList();
        Object[][] assignments = new Object[list.size()][4];

        for (int i = 0; i < list.size(); i++) {
            Assignment s = list.get(i);
            assignments[i][0] = s.getAssignmentID();
            assignments[i][1] = s.getName();
            assignments[i][2] = s.getContent();
            assignments[i][3] = s.getType();
        }

        table.setModel(new javax.swing.table.DefaultTableModel(
                assignments,
                new String[]{
                        "id", "name", "content", "type"
                }
        ));
    }//GEN-LAST:event_assignmentButtonActionPerformed


    private Object[][] addData;

    private void AddButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddButtonActionPerformed
        // TODO add your handling code here:
        mode = TableMode.edit;
        table.setEnabled(true);


        switch (type) {
            case student:
                addData = new Object[1][3];
                table.setModel(new javax.swing.table.DefaultTableModel(
                        addData,
                        new String[]{
                                "name", "email", "GPA"
                        }
                ));
                break;
            case file:
                addData = new Object[1][2];
                table.setModel(new javax.swing.table.DefaultTableModel(
                        addData,
                        new String[]{
                                "name", "link"
                        }
                ));
                break;
            case zoom:
                addData = new Object[1][2];
                table.setModel(new javax.swing.table.DefaultTableModel(
                        addData,
                        new String[]{
                                "name", "link"
                        }
                ));
                break;
            case assignment:
                addData = new Object[1][3];
                table.setModel(new javax.swing.table.DefaultTableModel(
                        addData,
                        new String[]{
                                "name", "content", "type"
                        }
                ));
                break;
            default:
                break;
        }


    }//GEN-LAST:event_AddButtonActionPerformed

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        // TODO add your handling code here:
        switch (type) {
            case student:
                studentButtonActionPerformed(null);
                break;
            case file:
                fileButtonActionPerformed(null);
                break;
            case zoom:
                zoomButtonActionPerformed(null);
                break;
            case assignment:
                assignmentButtonActionPerformed(null);
                break;
            default:
                break;
        }
    }//GEN-LAST:event_cancelButtonActionPerformed

    private void confirmButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_confirmButtonActionPerformed
        // TODO add your handling code here:
        switch (type) {
            case student: {
                String name = table.getValueAt(0, 0).toString();
                String email = table.getValueAt(0, 1).toString();
                double gpa = Double.parseDouble(table.getValueAt(0, 2).toString());

                for (Student student : course.getStudentDirectory()) {
                    if (student.getName().equals(name)) {
                        student.setGpa(gpa);
                        if (email != null) student.setEmail(email);

                        StudentDBUtil.update(student);

                        cancelButtonActionPerformed(null);

                        return;
                    }
                }


                JOptionPane.showMessageDialog(null, "Can't find this student");
            }
            break;
            case file: {
                String name = table.getValueAt(0, 0).toString();
                String link = table.getValueAt(0, 1).toString();

                if (link == null) link = DataGenerator.generateFilePath(name);
                File file = new File(DataGenerator.generateID(), name, link);

                course.getFileDirectory().add(file);

                FileDBUtil.add(file);
                CourseDBUtil.update(course);
            }


            break;
            case zoom: {
                String name = table.getValueAt(0, 0).toString();
                String link = table.getValueAt(0, 1).toString();

                if (link == null) link = DataGenerator.generateZoom();
                ZoomMeeting zoomMeeting = new ZoomMeeting(DataGenerator.generateID(), name, link);

                course.getZoomMeetingDirectory().add(zoomMeeting);

                ZoomMeetingDBUtil.add(zoomMeeting);
                CourseDBUtil.update(course);
            }
            break;
            case assignment: {
                String name = table.getValueAt(0, 0).toString();
                String content = table.getValueAt(0, 1).toString();
                String type = table.getValueAt(0, 2).toString();

                Assignment assignment = new Assignment(DataGenerator.generateID(), name, content, Assignment.AssignmentType.valueOf(type));

                course.getAssignmentDirectory().add(assignment);

                AssignmentDBUtil.add(assignment);
                CourseDBUtil.update(course);
            }

            break;
            default:
                break;
        }

        cancelButtonActionPerformed(null);

    }//GEN-LAST:event_confirmButtonActionPerformed

    private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteButtonActionPerformed
        // TODO add your handling code here:
        int row = table.getSelectedRow();
        switch (type) {
            case student:
                Student student = course.getStudentDirectory().get(row);

                course.setStudentIDs(course.getStudentIDs().stream().filter(id -> !id.equals(student.getId())).collect(Collectors.toList()));
                student.setCourseIDs(student.getCourseIDs().stream().filter(id -> !id.equals(course.getCourseID())).collect(Collectors.toList()));

               if(CourseDBUtil.update(course) && StudentDBUtil.update(student)){
                   studentButtonActionPerformed(null);
               }

                break;
            case file:{
                File file = course.getFileDirectory().get(row);

                course.getFileDirectory().remove(file);

                if(CourseDBUtil.update(course)){
                    fileButtonActionPerformed(null);
                }
            }
                break;
            case zoom:{
                ZoomMeeting zoom = course.getZoomMeetingDirectory().get(row);

                course.getZoomMeetingDirectory().remove(zoom);

                if(CourseDBUtil.update(course)){
                    zoomButtonActionPerformed(null);
                }
            }
                break;
            case assignment:{
                Assignment assignment = course.getAssignmentDirectory().get(row);

                course.getAssignmentDirectory().remove(assignment);

                if(CourseDBUtil.update(course)){
                    assignmentButtonActionPerformed(null);
                }
            }
                break;
            default:
                break;
        }
    }//GEN-LAST:event_deleteButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton AddButton;
    private javax.swing.JPanel SideBar;
    private javax.swing.JButton assignmentButton;
    private javax.swing.JButton backButton;
    private javax.swing.JButton cancelButton;
    private javax.swing.JButton confirmButton;
    private javax.swing.JPanel container;
    private javax.swing.JLabel courseLabel;
    private javax.swing.JButton deleteButton;
    private javax.swing.JButton fileButton;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JSeparator line;
    private javax.swing.JLabel nameLabel;
    private javax.swing.JButton studentButton;
    private javax.swing.JTable table;
    private javax.swing.JButton zoomButton;
    // End of variables declaration//GEN-END:variables
}
